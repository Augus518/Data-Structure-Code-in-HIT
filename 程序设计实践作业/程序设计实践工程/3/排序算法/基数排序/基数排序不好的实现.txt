#include <iostream>
#include <cstdio>
using namespace std;
int a[100000];
int n;
//计算在某一分位上的数据
int pre_process_data(int array[], int length, int weight)
{
    int index ;
    int value = 1;

    for(index = 0; index < weight; index++)
        value *= 10;

    for(index = 0; index < length; index ++)
        array[index] = array[index] % value /(value /10);

    for(index = 0; index < length; index ++)
        if(0 != array[index])
            return 1;

    return 0;
}
//对某一分位上的数据按照0~10排序
void sort_for_basic_number(int array[], int length, int swap[])
{
    int index;
    int basic;
    int total = 0;

    for(basic = -9; basic < 10; basic++)
    {
        for(index = 0; index < length; index++)
        {
            if(-10 != array[index] && basic == array[index] )
            {
                swap[total ++] = array[index];
                array[index] = -10;
            }
        }
    }

    memmove(array, swap, sizeof(int) * length);
}
//根据b中的排序结果，对实际的数据进行排序
void sort_data_by_basic_number(int array[], int data[], int swap[], int length, int weight)
{
    int index ;
    int outer;
    int inner;
    int value = 1;

    for(index = 0; index < weight; index++)
        value *= 10;

    for(outer = 0; outer < length; outer++)
    {
        for(inner = 0; inner < length; inner++)
        {
            if(-10 != array[inner] && data[outer]==(array[inner] % value /(value/10)))
            {
                swap[outer] = array[inner];
                array[inner] = -10;
                break;
            }
        }
    }

    memmove(array, swap, sizeof(int) * length);
    return;
}
//把a、b、c组合起来构成基数排序，直到某一分位上的数据为0
void radix_sort(int array[], int length)
{
    int* pData;
    int weight = 1;
    int count;
    int* swap;
    if(NULL == array || 0 == length)
        return;

    pData = (int*)malloc(sizeof(int) * length);
    assert(NULL != pData);
    memmove(pData, array, length * sizeof(int));

    swap = (int*)malloc(sizeof(int) * length);
    assert(NULL != swap);

    while(1)
    {
        count = pre_process_data(pData, length, weight);
        if(!count)
            break;

        sort_for_basic_number(pData, length, swap);
        sort_data_by_basic_number(array, pData, swap, length, weight);
        memmove(pData, array, length * sizeof(int));
        weight ++;
    }

    free(pData);
    free(swap);
    return;
}
int main()
{
    freopen("in.txt","r",stdin);
    clock_t start, finish;
    double duration;
    while (scanf("%d", &n) != EOF)
    {
        for (int i = 0; i < n; i++)
            scanf("%d", &a[i]);
        start=clock();
        radix_sort(a,n);
        finish = clock();
        duration =(double)(finish - start) / CLOCKS_PER_SEC;
        printf("基数排序用时: %f seconds\n", duration );
//        for (int i = 0; i < n; i++)
//            printf("%d ", a[i]);
        puts("");
    }
}























































